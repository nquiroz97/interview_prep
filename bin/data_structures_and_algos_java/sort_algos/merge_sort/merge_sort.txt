 
Starting: [ 20, 35,-15,7,55,1,-22 ]
start = 0, end = 7(array.length);
midpoint = (start + end) / 2

** elements 0 through 2 (0,1,2) will go into the left array, and elements 3 to 6 (3,4,5,6) will go into 
   right array 

Merge Sort
- Divide and conquer Algorithm
- Recursive Algorithm
- Two phases: splitting and merging
- splitting phase leads to faster sorting during the merging phase 
- splitting is logical, no new arrays are created

Splitting phase
- starts with the unsorted array 
- divide the array into two arrays, which are unsorted. The first array is the left array, 
  the second array is the right array.
- split the left and right arrays into two arrays each
- keep splitting until all arrays have only one element each; these will be sorted

Merging phase 
- Merge every left/right pair of sibling arrays into a sorted array
- After the first merge, there will be a bunch of 2-element sorted arrays 
- Then merge those sorted arrays(left/right siblings) to end up with 4-element sorted arrays 
- Repeat until complete single array is sorted
- Uses temporary arrays(not in-place)


- We merge sibling left and right arrays 
- We create a temporary array large enough to hold all the elements in the arrays we're merging
- We set i to the first index of the left array and j to the first index of the right array
- We compare left[i] to right[j]. If left is smaller, we copy it to the temp array and 
  increment i by 1. If right is smaller, we copy it to the temporary array and increment j by 1
- We repeat this process until all elements in two arrays have been processed 
- At this point, the temp array contains merged values in sorted order
- We then copy the temp array back into original input array at the correct positions 
- if the left array is at positions x to y, and the right array is at positions y + 1 to z,
  then after the copy, positions x to z will be sorted in the original array 


