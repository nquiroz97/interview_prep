binary search offers the searching benefit of an sorted/ordered array, as well as 
 the inserting and deleting benefits of a linked list 
- works great for insertion, deletion, as well as searching 
- tree structure is not sequential, also called a non-binary tree, since they have more 
  than 2 children(D, F, G) binary-trees only allow for two children max
      
            A      - is the root node, level 0
          /   \ 
         B     C     - child node, level 1
       / | \   <-------------------------------------------- this is a subtree
      D  F  G  - leaf nodes since they do not have any children, level 2

      - depth for leaf node D would be 2(count number of /'s(called edges or paths))

          -- Binary Tree since no more than two children 
          
            A      - is the root node, level 0
          /   \ 
         B     C     - child node, level 1
       / |    /  \   <-------------------------------------------- this is a subtree
      D  F   G    H   - leaf nodes since they do not have any children, level 2

      - depth for leaf node D would be 2(count number of /'s(called edges or paths))    


        Parent              - left child value must be less than parent value, 
                              whereas right child must be greater than to parent value, duplicates will go on the left  
        /    \
    left     right      - would be considered the parent of its own child nodes
    child    child

    the process of figuring out/navigating where the next values will go in the tree is called "traversing"
    visiting each node asking "will this value be to the left or right?"

    overall idea is that everything to the left of the root node must be less than its value(data),
    and those on the right will be larger either value or data 

    for deleting a node with children, it is best to use an in-order successor, find the smallest of
    the set of nodes that is larger than the original node 

    - 30, 35 and 40  are larger than 25: 30 is the smallest 

              50
            / 
           25 - replacing 25         
          /  \
        15    35
       /  \  /  \
      5  20 30  40

            50
            / 
           30 -          
          /  \
        15    35
       /  \     \
      5  20     40

